@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam roundcorner 10
hide enum methods

class Kingdomino {
    + {static}main()
    + {static}openMainMenu()
}

abstract class CSVReader {
    - {static} csvToListString():String[]
    - {static} splitString(line:String):String[]
    - {static} setDominos(listStringDomino:String[])
    + {static} getDominos():Domino[]
}

class ScoreCounter {
    - isHarmony:Boolean
    - isMiddle:Boolean
    + ScoreCounter(player:Player, isMiddle:Boolean, isHarmony:Boolean)
    + calculate()
    - checkMiddle():Boolean
    - checkHarmony():Boolean
    - checkTile(tile:Tile, domain:Tile[]):Boolean
    - tileAlreadyInDomain(tile:Tile):Boolean
    - getCrownCount(domain:Tile[]):Integer
}

package models {

    interface GameObserver {
        + reactGame(game:Game)
    }

    class Game {
        - round:Integer
        - middle:Boolean
        - harmony:Boolean

        + Game(players:Player[], deck:Domino[], middle:Boolean, harmony:Boolean)

        + getCurrentPlayer():Player
        + setCurrentPlayer(player:Player)
        + getAllPlayers():Player[]

        + nextRound()
        + getRound():Integer

        + getDraw(): Domino[]
        + getLastDraw(): Domino[]
        + getDeck(): Domino[]

        + isMiddle():Boolean
        + isHarmony():Boolean

        + notifyObservers()
        + addObserver(observer:GameObserver)
    }

    class Draw {
        - size:Integer
        + Draw(size:Integer)
        + getContent():Domino[]
        + getDomino(index:Integer):Domino
        + getSize():Integer
        + setContent(dominos:Domino[])
        + pickDomino():Domino

        + addObserver(observer:DrawObserver)
        + notifyObservers()
    }

    class Player {
        - name:String
        + score:Integer
        + Player(name:String, color:Colors, numberOfKings:Integer)
        + getName():String
        + getColor():Colors
        + getKings():King[]
        + getKingdom():Kingdom
    }

    class King {
        + isPlaced:Boolean
        + King(parent:Player)
        + getParent():Player
    }

    class Kingdom {
        + {static}gridSize:Integer
        + Kingdom(parent:Player)
        + getParent():Player
        + getKingdom():Tile[5][5]
        + hasCastle():Boolean
        + addTile(tile:Tile, x:Integer, y:Integer)
        + addDomino(tile:Tile, x:Integer, y:Integer)
        + isFree(x:Integer, y:Integer):Boolean
        - getTile(x:Integer, y:Integer):Tile
        - setTile(x:Integer, y:Integer)
        + canPlaceDomino(domino:Domino, x:Integer, y:Integer):Boolean
        - checkNeighbors(x:Integer, y:Integer, tile:Tile):Boolean
        - checkLandMatch(tile1:Tile, tile2:Tile):Boolean
        + addObserver(observer:KingdomObserver)
        + notifyObservers()
    }

    class Domino {
        - number:Integer
        - isInverted:Boolean
        - isVertical:Boolean

        + Domino(number:Integer,tile1:Tile, tile2:Tile)
        + getNumber():Integer
        + getTile1():Tile
        + getTile2():Tile

        + getTile2X(x:Integer):Integer
        + getTile2Y(y:Integer):Integer

        + isVertical():Boolean
        + setVertical(state:Boolean)
        + isInverted():Boolean
        + setInverted(state:Boolean)

        + addObserver(observer:DominoObserver)
        + notifyObservers()
    }

    class Tile {
        - crowns:Integer
        + Tile(land:Lands, crowns:Integer)
        + getCrowns():Integer
        + getLand():Lands
    }

    enum Lands {
        WATER
        FOREST
        WHEAT
        GRASS
        SWAMP
        MINE
        CASTLE
    }

    enum Colors {
        BLUE
        GREEN
        YELLOW
        PINK
    }

    interface KingdomObserver {
        + updateKingdom(kingdom:Kingdom)
    }

    interface DominoObserver {
        + updateDomino(domino:Domino)
    }

    interface DrawObserver {
        + updateDraw(draw:Draw)
    }

}

package views {

    class GameView implements GameObserver {
        + GameView(controller:GameController, game:GameView)
        + setAction(text:String, content)
        + reactGame(game:Game)
        + getDrawView():DrawView
    }

    class StartMenu {
        + StartMenu(controller:GameCreator)
        + isMiddle():Boolean
        + isHarmony():Boolean
        + refreshPlayers(players:PlayerEditor[])
    }

    class EndMenu {
        + EndMenu(game:Game)
    }

    class PlayerEditor {
        + PlayerEditor()
        + getPlayerName():String
        + getPlayerColor():Colors
        + setPlayerColor(color:Colors)
    }

    class KingdomView implements KingdomObserver, GameObserver {
        - {static}borderWidth:Integer
        - {static}borderColor:Color
        - {static}margins:Integer
        - previewX:Integer
        - previewY:Integer
        + KingdomView(kingdom:Kingdom, controller:GameController)
        + updateKingdom(kingdom:Kingdom)
        + reactGame(game:Game)
        + getTileView(x:Integer, y:Integer):TileView
        - setPreview(x:Integer, y:Integer)
        - removePreview()
    }

    class DrawView implements DrawObserver {
        - drawSize:Integer
        + DrawView(title:String, drawSize:Integer, controller:GameController)
        + updateDraw(draw:Draw)
        + showButtons(state:Boolean)
    }

    class DominoView implements DominoObserver {
        + DominoView(domino:Domino)
        + getDomino():Domino
        + updateDomino(domino:Domino)
    }

    class TileView {
        + {static}tileSize:Integer
        + TileView(tile:Tile)
        + getTile():Tile
        + setTile(tile:Tile)
        - setHover(state:Boolean)
    }

    class KingDominoDesign {
        + {static}BLUE:Color
        + {static}GREEN:Color
        + {static}YELLOW:Color
        + {static}PINK:Color
        + {static}RED:Color
        + {static}PURPLE:Color
        + {static}BLACK:Color
        + {static}GRAY:Color

        + {static}textXl:Float
        + {static}textLg:Float
        + {static}textMd:Float
        + {static}textBase:Float
        + {static}textSm:Float

        + titleFont:Font
        + textFont:Font

        - {static}instance:KingDominoDesign

        - KingDominoDesign()

        + {static}getInstance():KingDominoDesign
        + {static}getColor(color:Colors):Color

    }

    class DominoPlacement {
        + DominoPlacement(controller:DominoController, domino:Domino)
    }

    class KingView {
        + KingView(king:King)
        + setKing(king:King)
    }

}

package controllers {

    class GameController {
        - placedCastles:Boolean
        + GameController(game:Game, creator:GameCreator)
        + setView(view:GameView)
        + setDrawView(drawView:DrawView)
        + play()
        + makeDraw()
        + playerPlaceCastle()
        + playerChooseDomino(king:King)
        + dominoChosen(domino:Domino)
        + kingdomClicked(kingdom:Kingdom, x:Integer, y:Integer)
        + discardDomino()
        + playerPlaceDomino(domino:Domino)
        + exitGame()
        + closeGame()
    }

    class GameCreator {
        + GameCreator(dominos:Domino[])
        + setView(view:StartMenu)
        + canAddPlayer():boolean
        + canRemovePlayer():boolean
        + addPlayer()
        + removePlayer()
        + getPlayers():Player[]
        + createGame(view:StartMenu)
    }

    class DominoController {
        + DominoController(domino:Domino, controller:GameController)
        + rotate()
        + invert()
        + discard()
    }

}

Kingdomino ..> StartMenu : "<<use>>"
Kingdomino ..> GameCreator : "<<use>>"

GameCreator *--> "- players \n 2..3" PlayerEditor : > contains
GameCreator o--> "- view \n 1" StartMenu : > contains
GameCreator ..> Game : "<<use>>"
GameCreator ..> GameView : "<<use>>"
GameCreator ..> GameController : "<<use>>"
GameCreator ..> CSVReader : "<<use>>"

Game *--> "- players \n 2..4" Player : > contains
Game *--> "- deck \n 0..48" Domino : > contains
Game *--> "- draw \n 1" Draw : > contains
Game *--> "- lastDraw \n 1" Draw : > contains
Game o--> "- observers \n *" GameObserver : > contains
Game o--> "- currentPlayer \n 1" Player : > contains

Draw o--> "- content \n *" Domino : > contains
Draw o--> "- observers \n *" DrawObserver : > contains

GameController o--> "- game \n 1" Game : > controls
GameController o--> "- view \n 1" GameView : > contains
GameController ..> DominoPlacement : <<use>>
GameController ..> DominoController : <<use>>

GameView ..> Game : "<<use>>"
GameView ..> KingdomView : "<<use>>"
GameView *--> " - actualDraw \n 1" DrawView : > contains

StartMenu o--> "- controller \n 1" GameCreator : > controlled by

Player *--> "- kingdom \n 1" Kingdom : > owns
Player *--> "- kings \n 1..2" King : > contains
Player *--> "+ currentKing \n 1" King : > contains
Player *-> "- color \n 1" Colors : > contains
Player o--> "+ dominoToPlace \n 1" Domino : > contains

King o--> "- parent \n 1" Player : > contains

Kingdom o--> "- parent \n 1" Player : > contains
Kingdom o--> "- board \n [5][5]" Tile : > contains
Kingdom o--> "- observers \n *" KingdomObserver : > contains

DominoController o--> "- domino \n 1" Domino : > contains
DominoController o--> "- controller \n 1" GameController : > contains

DominoPlacement o--> "- controller \n 1" DominoController : > contains

KingdomView o--> "- kingdom \n 1" Kingdom : > contains
KingdomView ..> TileView : <<use>>

DrawView *--> " -dominos \n 3..4" DominoView : > contains
DrawView *--> " -kings \n 3..4" KingView : > contains

DominoView o--> "- domino \n 1" Domino : > contains
DominoView ..> TileView : <<use>>

Domino o-> "- tile1 \n 1" Tile : > contains
Domino o-> "- tile2 \n 1" Tile : > contains
Domino o--> "+ king \n 0..1" King : > contains
Domino o--> "- observers \n *" DominoObserver : > contains

Tile *-> "- type \n 1" Lands : > contains

TileView o--> "-tile \n 1" Tile : > contains

ScoreCounter o--> " - domains \n [][]" Tile : > contains

@enduml