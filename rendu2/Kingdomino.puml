@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam roundcorner 10
hide enum methods

class Kingdomino {
    + {static}main()
    + {static}openMainMenu()
}

package models {

    interface GameObserver {
        + reactGame(game:Game)
    }

    class Game {
        - round:Integer
        - middle:Boolean
        - harmony:Boolean

        + Game(players:Player[], deck:Domino[], middle:Boolean, harmony:Boolean)

        + getCurrentPlayer():Player
        + setCurrentPlayer(player:Player)
        + getAllPlayers():Player[]

        + nextRound()
        + getRound():Integer

        + getDraw(): Domino[]
        + getLastDraw(): Domino[]
        + setDraw(draw:Domino[])
        + pickDominoToPlace():Domino
        + getDeck(): Domino[]

        + isMiddle():Boolean
        + isHarmony():Boolean

        + notifyObservers()
        + addObserver(observer:GameObserver)
    }

    class Player {
        - name:String
        + Player(name:String, color:Colors, numberOfKings:Integer)
        + getName():String
        + getColor():Colors
        + getKings():King[]
        + getKingdom():Kingdom
    }

    class King {
        + isPlaced:Boolean
        + King(parent:Player)
        + getParent():Player
    }

    class Kingdom {
        + {static}gridSize:Integer
        + Kingdom(parent:Player)
        + getParent():Player
        + getKingdom():Tile[5][5]
        + hasCastle():Boolean
        + addTile(tile:Tile, x:Integer, y:Integer)
        + addDomino(tile:Tile, x:Integer, y:Integer)
        + isFree(x:Integer, y:Integer)
        + canPlaceDomino(domino:Domino, x:Integer, y:Integer)

        + addObserver(observer:KingdomObserver)
        + notifyObservers()
    }

    class Domino {
        - number:Integer
        - isInverted:Boolean
        - isVertical:Boolean

        + Domino(number:Integer,tile1:Tile, tile2:Tile)
        + getNumber():Integer
        + getTile1():Tile
        + getTile2():Tile

        + getTile2X(x:Integer):Integer
        + getTile2Y(y:Integer):Integer

        + isVertical():Boolean
        + setVertical(state:Boolean)
        + isInverted():Boolean
        + setInverted(state:Boolean)

        + addObserver(observer:DominoObserver)
        + notifyObservers()
    }

    class Tile {
        - crowns:Integer
        + Tile(land:Lands, crowns:Integer)
        + getCrowns():Integer
        + getLand():Lands
    }

    enum Lands {
        WATER
        FOREST
        WHEAT
        GRASS
        SWAMP
        MINE
        CASTLE
    }

    enum Colors {
        BLUE
        GREEN
        YELLOW
        PINK
    }

    interface KingdomObserver {
        + updateKingdom(kingdom:Kingdom)
    }

    interface DominoObserver {
        + updateDomino(domino:Domino)
    }


}

package views {

    class GameView implements GameObserver {
        + GameView(controller:GameController, game:GameView)
        + setAction(text:String, content)
        + reactGame(game:Game)
    }

    class StartMenu {
        + StartMenu(controller:GameCreator)
        + isMiddle():Boolean
        + isHarmony():Boolean
        + refreshPlayers(players:PlayerEditor[])
    }

    class EndMenu {
        + EndMenu(game:Game)
    }

    class PlayerEditor {
        + PlayerEditor()
        + getPlayerName():String
        + getPlayerColor():Colors
        + setPlayerColor(color:Colors)
    }

    class KingdomView implements KingdomObserver, GameObserver {
        - {static}borderWidth:Integer
        - {static}borderColor:Color
        - {static}margins:Integer
        - previewX:Integer
        - previewY:Integer
        + KingdomView(kingdom:Kingdom, controller:GameController)
        + updateKingdom(kingdom:Kingdom)
        + reactGame(game:Game)
        - setPreview(x:Integer, y:Integer)
        - removePreview()
    }

    class DrawView {
        + DrawView(dominos:Domino[], title:String, controller:GameController)
        + showButtons()
    }

    class DominoView implements DominoObserver {
        + DominoView(domino:Domino)
        + getDomino():Domino
        + updateDomino(domino:Domino)
    }

    class TileView {
        + {static}tileSize:Integer
        + TileView(tile:Tile)
        + getTile():Tile
        - setHover(state:Boolean)
    }

    class KingDominoDesign {
        + {static}BLUE:Color
        + {static}GREEN:Color
        + {static}YELLOW:Color
        + {static}PINK:Color
        + {static}RED:Color
        + {static}PURPLE:Color
        + {static}BLACK:Color
        + {static}GRAY:Color

        + {static}textXl:Float
        + {static}textLg:Float
        + {static}textMd:Float
        + {static}textBase:Float
        + {static}textSm:Float

        + titleFont:Font
        + textFont:Font

        - {static}instance:KingDominoDesign

        - KingDominoDesign()

        + {static}getInstance():KingDominoDesign
        + {static}getColor(color:Colors):Color

    }

    class DominoPlacement {
        + DominoPlacement(controller:DominoController, domino:Domino)
    }

    class KingView {
        + KingView(color:Colors)
    }

    class KingButton {
        + {static}defaultColor:Color
        + {static}hoveredColor:Color
        + KingButton(text:String)
    }

}

package controllers {

    class GameController {
        - placedCastles:Boolean
        + GameController(game:Game, creator:GameCreator)
        + setView(view:GameView)
        + setDrawView(drawView:DrawView)
        + play()
        + makeDraw()
        + playerPlaceCastle()
        + playerChooseDomino(king:King)
        + dominoChosen(domino:Domino)
        + kingdomClicked(kingdom:Kingdom, x:Integer, y:Integer)
        + playerPlaceDomino(domino:Domino)
        + exitGame()
    }

    class GameCreator {
        + GameCreator(dominos:Domino[])
        + setView(view:StartMenu)
        + canAddPlayer():boolean
        + canRemovePlayer():boolean
        + addPlayer()
        + removePlayer()
        + getPlayers():Player[]
        + createGame(view:StartMenu)
    }

    class DominoController {
        + DominoController(kingdom:Kingdom, domino:Domino)
        + rotate()
        + invert()
        + place()
    }

    abstract class CSVReader {
        - {static} csvToListString():String[]
        - {static} splitString(line:String):String[]
        - {static} setDominos(listStringDomino:String[])
        + {static} getDominos():Domino[]
    }

}

Kingdomino ..> StartMenu : "<<use>>"
Kingdomino ..> GameCreator : "<<use>>"
Kingdomino ..> CSVReader : "<<use>>"

GameCreator " - dominos" o--> "*" Domino : > contains
GameCreator " - players" *--> "2, 3" PlayerEditor : > contains
GameCreator " - view" o--> "1" StartMenu : > contains
GameCreator ..> Game : "<<use>>"
GameCreator ..> GameView : "<<use>>"
GameCreator ..> GameController : "<<use>>"

Game " - players" *--> "2, 4" Player : > contains
Game " - deck" *--> "0, 48" Domino : > contains
Game " - draw" *--> "3, 4" Domino : > contains
Game " - lastDraw" *--> "3, 4" Domino : > contains
Game " - observers" o--> "*" GameObserver : > contains
Game " - currentPlayer" o--> "1" Player : > contains

GameController " - game" o--> "1" Game : > controls
GameController " - view" o--> "1" GameView : > contains
GameController " - drawView" o--> "1" DrawView : > contains
GameController ..> DominoPlacement : <<use>>
GameController ..> DominoController : <<use>>
GameController ..> EndMenu : "<<use>>"

GameView " - controller" o--> "1" GameController : > controlled by
GameView ..> Game : "<<use>>"
GameView ..> KingdomView : "<<use>>"
GameView ..> DrawView : <<use>>

StartMenu " - controller" o--> "1" GameCreator : > controlled by

EndMenu ..> Game : "<<use>>"
EndMenu ..> StartMenu : "<<use>>"

Player " - kingdom"  *--> "1" Kingdom : > owns
Player " - kings" *--> "1,2" King : > contains
Player " + currentKing" *--> "1" King : > contains
Player " - color" *-> "1" Colors : > contains
Player " + dominoToPlace" o--> "1" Domino : > contains

King " - parent" o--> "1" Player : > contains

Kingdom " - parent" o--> "1" Player : > contains
Kingdom " - board" o--> "[5][5]" Tile : > contains
Kingdom " - observers" o--> "*" KingdomObserver : > contains

DominoController " - kingdom" o--> "1" Kingdom : > contains
DominoController " - domino" o--> "1" Domino : > contains

DominoPlacement " - controller" o--> "1" DominoController : > contains

KingdomView " - kingdom" o--> "1" Kingdom : > contains
KingdomView " - controller" o--> "1" GameController : > contains
KingdomView ..> DominoView : <<use>>

DrawView ..> DominoView : <<use>>
DrawView ..> KingView : <<use>>

DominoView " - domino" o--> "1" Domino : > contains
DominoView ..> TileView : <<use>>

Domino " - tile1" o-> "1" Tile : > contains
Domino " - tile2" o-> "1" Tile : > contains
Domino " + king" o--> "1" King : > contains
Domino " - observers" o--> "*" DominoObserver : > contains

Tile " - type" *-> "1" Lands : > contains

TileView " -tile" o--> "1" Tile : > contains

@enduml