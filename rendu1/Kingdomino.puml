@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class Kingdomino {
    + {static}main()
}

package models {

    interface GameObserver {
        + react(game:Game)
    }

    class Game {
        + Game(players:Player[],  middle:Boolean, harmony:Boolean)

        - round:Integer

        + middle:Boolean
        + harmony:Boolean

        + getCurrentPlayer():Player
        + setCurrentPlayer(player:Player)

        + nextRound()
        + getRound():Integer

        + getDraw(): Domino[]
        + getLastDraw(): Domino[]
        + setDraw(draw:Domino[])

        + notifyObservers()
        + addObserver(observer:GameObserver)
    }

    class Player {
        + Player(name:String, color:Colors, kings:King[])
        - name:String

        + getName():String
        + getColor():Colors
        + getKings():King[]
    }

    class King {
        + King(parent:Player)
        + getParent():Player
    }

    class Kingdom {
        + Kingdom(parent:Player)
        + getParent():Player
    }

    class Domino {
        + Domino(number:Integer,tile1:Tile, tile2:Tile)
        - number:Integer

        + getNumber():Integer
        + getTile1():Tile
        + getTile2():Tile
    }

    class Tile {
        + Tile(land:Lands, crowns:Integer)
        - crowns:Integer

        + getCrowns():Integer
        + getLand():Lands
    }

    enum Lands {
        WATER
        FOREST
        WHEAT
        GRASS
        SWAMP
        MINE
        CASTLE
    }

    enum Colors {
        BLUE
        GREEN
        YELLOW
        PINK
    }

}

package views {

    class GameView implements GameObserver {
        + GameView(controller:GameController)
        + react(game:Game)
    }

    class StartMenu {
        + StartMenu(controller:GameCreator)
    }

    class EndMenu {
        + EndMenu(game:Game)
    }

    class PlayerEditor {
        + PlayerEditor()
        + getPlayerName():String
        + getPlayerColor():Colors
    }
}

package controllers {

    class GameController {
        + GameController(game:Game)
        + makeDraw()
        + playerPlaceCastle()
        + playerChooseDomino()
        + playerPlaceDomino()
    }

    class GameCreator {
        - dominoes:Domino[]

        + GameCreator(dominoes:Domino[])
        + createGame()
    }

}

Kingdomino ..> StartMenu : "<<use>>"
Kingdomino ..> GameCreator : "<<use>>"

GameCreator ..> Game : "<<use>>"
GameCreator ..> GameView : "<<use>>"
GameCreator ..> GameController : "<<use>>"

Game " + players" *--> "2, 4" Player : > contains
Game " + deck" *--> "0, 48" Domino : > contains
Game " - draw" *--> "3, 4" Domino : > contains
Game " - lastDraw" *--> "3, 4" Domino : > contains
Game " - observers" o--> "*" GameObserver : > contains
Game " - currentPlayer" o--> Player : > contains

GameController " - game" o--> Game : > contains
GameController ..> EndMenu : "<<use>>"

GameView " - controller" o--> GameController : > contains

StartMenu " + players" *--> "2, 4" PlayerEditor : > contains

EndMenu ..> Game : "<<use>>"
EndMenu ..> StartMenu : "<<use>>"

Player " + kingdom"  *--> Kingdom : > contains
Player " - kings" *--> "1,2" King : > contains
Player " - color" *-> Colors : > has

King " - parent" o--> Player : > knows

Kingdom " - parent" o--> Player : > knows
Kingdom " + board" o--> "[5][5]" Tile : > contains

Domino " - tile1" o-> Tile : > contains
Domino " - tile2" o-> Tile : > contains
Domino " + king" o--> King : > contains

Tile *-> Lands : " - type" > is

@enduml